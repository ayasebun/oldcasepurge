#!/bin/bash
##########################################
# If you share this I'm coming after you
# You know who you are
# + I don't know you
# + ratio
##########################################

### ## # == = - [ Color Fun ] - = == # ## ###
normal=$(tput sgr0)
blue=$(tput setaf 153)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)

### ## # == = - [ Check ] - = == # ## ###

# Listing folders, handles for both old and not old.
oldList(){

    if [ $oldFound=0 ]; then
        # Lists oldies
        find /mnt/c/Users/${USER}/Downloads -maxdepth 1 -type d -name "case_*" -mtime +30
    elif [ $oldFound=1 ]; then
        find /mnt/c/Users/${USER}/Downloads -maxdepth 1 -type d -name "case_*"
    fi

}

# Warning about links because that happens for some goddamn reason
oldLinks(){
    linkOut=$'\033[1;31mLinks\033[0m'
    linkOut+="$(printf "\n" && find /mnt/c/Users/${USER}/Downloads/case_* -type l -mtime +30)"
    local linkCheck=$(printf "${linkOut}" | wc -l)

    if [ $linkCheck -gt 0 ]; then
        printf  "\n${yellow}[WARNING] You appear to have ${red}$linkCheck${yellow} old link(s) over 30 days of age. Please check them manually before you nuke something by accident${normal}\n\n"
        printf "${linkOut}\n\n"
    fi
}

# The ACTUAL check for old folders
oldCheck(){
    # Checking for old case dirs
    if [ $(find /mnt/c/Users/${USER}/Downloads -maxdepth 1 -type d -name "case_*" -mtime +30 | wc -l) -gt 0 ]; then           printf "${yellow}[WARNING] FOUND CASE FOLDERS OVER 30* DAYS OLD. Please review the following:${normal}\n\n"
        oldFound=0
    elif [ $(find /mnt/c/Users/${USER}/Downloads -maxdepth 1 -type d -name "case_*" | wc -l) -eq 0 ] ; then
        printf "${green}[OK] All Gucci.${normal}\n\nWhile there were no case folders found over 30 days old, ${yellow}please${normal} ensure that you still need these directories, or if they should be purged: \n----------\n\n"
        oldFound=1
    fi

    # Old folders are validated in oldList() regardless, so here we can pipe the output straight into a loop to read stuff.
    if [ $oldFound=1 ]; then
        oldList
    elif [ $oldFound=0 ]; then
        oldList | while read dirLine; do du -sBM $dirLine ; done | sort -rn | awk '{ total+=$1; if($1>0) {i++; printf("\033[1;34m%12s\033[0m - ",$1); $1=""; printf("\033[1;33m%s\033[0m\n",$0);}}END{printf("\n\033[1;36m%12sM\033[0m - [Total] Disk Space taken up by the funny case_* folders\n",total);}'
    fi

    echo

    # Warn about links. Of note I've only had dead links in my WSL *ONCE* so you can probably take this out for performance reasons.
    oldLinks
}


### ## # == = - [ Scary ] - = == # ## ###

# THIS SHOULD ONLY executes if the condition of "oldFound" returns a valid value
oldPurge(){
    if [ oldFound=0 ]; then
        oldList | while read oldDir
        do
            printf "${red}[REMOVING] $oldDir${normal}\n"
            # I've temporarily commented out the "find" that deletes, and replaced it with a sanity check "echo" for now. If you find that you like what this does then please feel free to swap them out.
            # echo 'find $oldDir -type f -delete && find $oldDir -type d -delete && printf "${yellow}[REMOVED] $oldDir${normal}\n\n"'
            find $oldDir -type f -delete && find $oldDir -type d -delete && printf "${yellow}[REMOVED] $oldDir${normal}\n\n"
        done
    fi
}

### ## # == = - [ Main ] - = == # ## ###

# Don't need anything fancy here. This ONLY takes --run, --check and --help, using long options because I HATE short opts. You can edit this as you see fit.
if [ -z $1 ]; then
    # In case positional argument $1 is empty:
    printf "${red}[ERROR] Invalid Input, homie.${normal}\n\n"
    exit 1

# In this [[ expression ]], so long as ONE of these matches it'll go and get the corresponding argument
elif [ ! -z $1 ]; then
    case $1 in
        '--help' )
            printf "\n${blue}[HELP] The script must be executed with either --check or --run. It takes exactly ONE argument. The former, you know, checks... The latter will run the cleanup.${normal}\n"
            exit 0
            ;;
        '--check' )
            printf "\n${blue}[CHECK] Check will execute. No changes will be performed.${normal}\n\n"
            oldCheck
            ;;
        '--run' )
            printf "\n${yellow}[EXECUTE] Script will run. At least, its intended to. lol. hf bs dd${normal}\n\n"
            oldPurge
            ;;
        * )
            printf "\n${red}lol?${normal}\n\n"
            exit 1
            ;;
    esac
fi
